# -*- coding: utf-8 -*-
"""FeedForward.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LxToZUezBecNx9FHppUOv5BXT8iGXSAE
"""

import numpy as np
from keras.datasets import fashion_mnist
from sklearn.model_selection import train_test_split

import numpy as np

class MLP:
    def __init__(self, X, Y, layers):
        self.X, self.Y = X, Y
        self.n_samples = len(X)
        self.layers = layers
        self.weights = {}

        for i in range(len(layers) - 1):
            self.weights[f'w{i+1}'] = np.random.randn(layers[i], layers[i+1])
            self.weights[f'b{i+1}'] = np.zeros((1, layers[i+1]))

    def activate_relu(self, z):
        return np.maximum(0, z)

    def activate_sigmoid(self, z):
        return 1 / (1 + np.exp(-z))

    def activate_softmax(self, z):
        exp_vals = np.exp(z - np.max(z, axis=1, keepdims=True))
        return exp_vals / np.sum(exp_vals, axis=1, keepdims=True)

    def forward_pass(self, data):
        activations = []
        for i in range(len(self.layers) - 1):
            z = np.dot(data if i == 0 else activations[-1], self.weights[f'w{i+1}']) + self.weights[f'b{i+1}']
            a = self.activate_sigmoid(z) if i < len(self.layers) - 2 else self.activate_softmax(z)
            activations.append(a)
        return activations[-1]

#loading the data from fashion_mnist dataset
(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()

train_images = train_images.reshape(train_images.shape[0], -1) / 255.0
test_images = test_images.reshape(test_images.shape[0], -1) / 255.0

train_labels_one_hot = np.eye(10)[train_labels]
test_labels_one_hot = np.eye(10)[test_labels]

#Any number of layers and their sizes can be given here
layer_sizes = [train_images.shape[1], 128, 64, 32, 10]  # Input, hidden1, hidden2,hidden3 output

#initialize, train and test our feedforward only model
mlp = MLP(train_images, train_labels_one_hot, layer_sizes)
feedForwardOutput=mlp.forward_pass(train_images)

print("Predicted probabilty after one feed forward call:")
print(feedForwardOutput[10])

print("True label value of Image:")
print(test_labels_one_hot[10])